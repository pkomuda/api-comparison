/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: account.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/empty";
import * as dependency_2 from "./google/protobuf/wrappers";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
import * as grpc_web_1 from "grpc-web";
export namespace account {
    export class LoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
        }): LoginRequest {
            const message = new LoginRequest({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginRequest {
            return LoginRequest.deserialize(bytes);
        }
    }
    export class AddAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
            confirmPassword?: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            active?: boolean;
            accessLevels?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("confirmPassword" in data && data.confirmPassword != undefined) {
                    this.confirmPassword = data.confirmPassword;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
                if ("active" in data && data.active != undefined) {
                    this.active = data.active;
                }
                if ("accessLevels" in data && data.accessLevels != undefined) {
                    this.accessLevels = data.accessLevels;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get confirmPassword() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set confirmPassword(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get active() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set active(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get accessLevels() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set accessLevels(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
            confirmPassword?: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            active?: boolean;
            accessLevels?: string[];
        }): AddAccountRequest {
            const message = new AddAccountRequest({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.confirmPassword != null) {
                message.confirmPassword = data.confirmPassword;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            if (data.active != null) {
                message.active = data.active;
            }
            if (data.accessLevels != null) {
                message.accessLevels = data.accessLevels;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
                confirmPassword?: string;
                email?: string;
                firstName?: string;
                lastName?: string;
                active?: boolean;
                accessLevels?: string[];
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.confirmPassword != null) {
                data.confirmPassword = this.confirmPassword;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            if (this.active != null) {
                data.active = this.active;
            }
            if (this.accessLevels != null) {
                data.accessLevels = this.accessLevels;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.confirmPassword.length)
                writer.writeString(3, this.confirmPassword);
            if (this.email.length)
                writer.writeString(4, this.email);
            if (this.firstName.length)
                writer.writeString(5, this.firstName);
            if (this.lastName.length)
                writer.writeString(6, this.lastName);
            if (this.active != false)
                writer.writeBool(7, this.active);
            if (this.accessLevels.length)
                writer.writeRepeatedString(8, this.accessLevels);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.confirmPassword = reader.readString();
                        break;
                    case 4:
                        message.email = reader.readString();
                        break;
                    case 5:
                        message.firstName = reader.readString();
                        break;
                    case 6:
                        message.lastName = reader.readString();
                        break;
                    case 7:
                        message.active = reader.readBool();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddAccountRequest {
            return AddAccountRequest.deserialize(bytes);
        }
    }
    export class AccountDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            active?: boolean;
            confirmed?: boolean;
            accessLevels?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("firstName" in data && data.firstName != undefined) {
                    this.firstName = data.firstName;
                }
                if ("lastName" in data && data.lastName != undefined) {
                    this.lastName = data.lastName;
                }
                if ("active" in data && data.active != undefined) {
                    this.active = data.active;
                }
                if ("confirmed" in data && data.confirmed != undefined) {
                    this.confirmed = data.confirmed;
                }
                if ("accessLevels" in data && data.accessLevels != undefined) {
                    this.accessLevels = data.accessLevels;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get firstName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set firstName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get lastName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set lastName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get active() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set active(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get confirmed() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set confirmed(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get accessLevels() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set accessLevels(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            username?: string;
            email?: string;
            firstName?: string;
            lastName?: string;
            active?: boolean;
            confirmed?: boolean;
            accessLevels?: string[];
        }): AccountDetails {
            const message = new AccountDetails({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.firstName != null) {
                message.firstName = data.firstName;
            }
            if (data.lastName != null) {
                message.lastName = data.lastName;
            }
            if (data.active != null) {
                message.active = data.active;
            }
            if (data.confirmed != null) {
                message.confirmed = data.confirmed;
            }
            if (data.accessLevels != null) {
                message.accessLevels = data.accessLevels;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                email?: string;
                firstName?: string;
                lastName?: string;
                active?: boolean;
                confirmed?: boolean;
                accessLevels?: string[];
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.firstName != null) {
                data.firstName = this.firstName;
            }
            if (this.lastName != null) {
                data.lastName = this.lastName;
            }
            if (this.active != null) {
                data.active = this.active;
            }
            if (this.confirmed != null) {
                data.confirmed = this.confirmed;
            }
            if (this.accessLevels != null) {
                data.accessLevels = this.accessLevels;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (this.firstName.length)
                writer.writeString(3, this.firstName);
            if (this.lastName.length)
                writer.writeString(4, this.lastName);
            if (this.active != false)
                writer.writeBool(5, this.active);
            if (this.confirmed != false)
                writer.writeBool(6, this.confirmed);
            if (this.accessLevels.length)
                writer.writeRepeatedString(7, this.accessLevels);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.firstName = reader.readString();
                        break;
                    case 4:
                        message.lastName = reader.readString();
                        break;
                    case 5:
                        message.active = reader.readBool();
                        break;
                    case 6:
                        message.confirmed = reader.readBool();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountDetails {
            return AccountDetails.deserialize(bytes);
        }
    }
    export class AccountList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            accounts?: AccountDetails[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("accounts" in data && data.accounts != undefined) {
                    this.accounts = data.accounts;
                }
            }
        }
        get accounts() {
            return pb_1.Message.getRepeatedWrapperField(this, AccountDetails, 1) as AccountDetails[];
        }
        set accounts(value: AccountDetails[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            accounts?: ReturnType<typeof AccountDetails.prototype.toObject>[];
        }): AccountList {
            const message = new AccountList({});
            if (data.accounts != null) {
                message.accounts = data.accounts.map(item => AccountDetails.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                accounts?: ReturnType<typeof AccountDetails.prototype.toObject>[];
            } = {};
            if (this.accounts != null) {
                data.accounts = this.accounts.map((item: AccountDetails) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.accounts.length)
                writer.writeRepeatedMessage(1, this.accounts, (item: AccountDetails) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.accounts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AccountDetails.deserialize(reader), AccountDetails));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountList {
            return AccountList.deserialize(bytes);
        }
    }
    export class GetAccountsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            query?: string;
            sort?: string;
            dir?: string;
            page?: number;
            size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("sort" in data && data.sort != undefined) {
                    this.sort = data.sort;
                }
                if ("dir" in data && data.dir != undefined) {
                    this.dir = data.dir;
                }
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("size" in data && data.size != undefined) {
                    this.size = data.size;
                }
            }
        }
        get query() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set query(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sort() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set sort(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get dir() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set dir(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get size() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set size(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            query?: string;
            sort?: string;
            dir?: string;
            page?: number;
            size?: number;
        }): GetAccountsRequest {
            const message = new GetAccountsRequest({});
            if (data.query != null) {
                message.query = data.query;
            }
            if (data.sort != null) {
                message.sort = data.sort;
            }
            if (data.dir != null) {
                message.dir = data.dir;
            }
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.size != null) {
                message.size = data.size;
            }
            return message;
        }
        toObject() {
            const data: {
                query?: string;
                sort?: string;
                dir?: string;
                page?: number;
                size?: number;
            } = {};
            if (this.query != null) {
                data.query = this.query;
            }
            if (this.sort != null) {
                data.sort = this.sort;
            }
            if (this.dir != null) {
                data.dir = this.dir;
            }
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.size != null) {
                data.size = this.size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.query.length)
                writer.writeString(1, this.query);
            if (this.sort.length)
                writer.writeString(2, this.sort);
            if (this.dir.length)
                writer.writeString(3, this.dir);
            if (this.page != 0)
                writer.writeUint32(4, this.page);
            if (this.size != 0)
                writer.writeUint32(5, this.size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAccountsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAccountsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.query = reader.readString();
                        break;
                    case 2:
                        message.sort = reader.readString();
                        break;
                    case 3:
                        message.dir = reader.readString();
                        break;
                    case 4:
                        message.page = reader.readUint32();
                        break;
                    case 5:
                        message.size = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAccountsRequest {
            return GetAccountsRequest.deserialize(bytes);
        }
    }
    export class AccountPages extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            accounts?: AccountDetails[];
            totalSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("accounts" in data && data.accounts != undefined) {
                    this.accounts = data.accounts;
                }
                if ("totalSize" in data && data.totalSize != undefined) {
                    this.totalSize = data.totalSize;
                }
            }
        }
        get accounts() {
            return pb_1.Message.getRepeatedWrapperField(this, AccountDetails, 1) as AccountDetails[];
        }
        set accounts(value: AccountDetails[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get totalSize() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set totalSize(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            accounts?: ReturnType<typeof AccountDetails.prototype.toObject>[];
            totalSize?: number;
        }): AccountPages {
            const message = new AccountPages({});
            if (data.accounts != null) {
                message.accounts = data.accounts.map(item => AccountDetails.fromObject(item));
            }
            if (data.totalSize != null) {
                message.totalSize = data.totalSize;
            }
            return message;
        }
        toObject() {
            const data: {
                accounts?: ReturnType<typeof AccountDetails.prototype.toObject>[];
                totalSize?: number;
            } = {};
            if (this.accounts != null) {
                data.accounts = this.accounts.map((item: AccountDetails) => item.toObject());
            }
            if (this.totalSize != null) {
                data.totalSize = this.totalSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.accounts.length)
                writer.writeRepeatedMessage(1, this.accounts, (item: AccountDetails) => item.serialize(writer));
            if (this.totalSize != 0)
                writer.writeUint64(2, this.totalSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountPages {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountPages();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.accounts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AccountDetails.deserialize(reader), AccountDetails));
                        break;
                    case 2:
                        message.totalSize = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountPages {
            return AccountPages.deserialize(bytes);
        }
    }
    export abstract class UnimplementedAccountService {
        static definition = {
            Login: {
                path: "/account.Account/Login",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.StringValue) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.StringValue.deserialize(new Uint8Array(bytes))
            },
            AddAccount: {
                path: "/account.Account/AddAccount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddAccountRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddAccountRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            GetAccount: {
                path: "/account.Account/GetAccount",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.StringValue) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.StringValue.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AccountDetails) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AccountDetails.deserialize(new Uint8Array(bytes))
            },
            GetAllAccounts: {
                path: "/account.Account/GetAllAccounts",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AccountList) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AccountList.deserialize(new Uint8Array(bytes))
            },
            GetAccounts: {
                path: "/account.Account/GetAccounts",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetAccountsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetAccountsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AccountPages) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AccountPages.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Login(call: grpc_1.ServerUnaryCall<LoginRequest, dependency_2.google.protobuf.StringValue>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.StringValue>): void;
        abstract AddAccount(call: grpc_1.ServerUnaryCall<AddAccountRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract GetAccount(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.StringValue, AccountDetails>, callback: grpc_1.sendUnaryData<AccountDetails>): void;
        abstract GetAllAccounts(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, AccountList>, callback: grpc_1.sendUnaryData<AccountList>): void;
        abstract GetAccounts(call: grpc_1.ServerUnaryCall<GetAccountsRequest, AccountPages>, callback: grpc_1.sendUnaryData<AccountPages>): void;
    }
    export class AccountClient {
        private _address: string;
        private _client: grpc_web_1.GrpcWebClientBase;
        constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
            if (!options)
                options = {};
            options.format = options.format || "text";
            this._address = address;
            this._client = new grpc_web_1.GrpcWebClientBase(options);
        }
        private static Login = new grpc_web_1.MethodDescriptor<LoginRequest, dependency_2.google.protobuf.StringValue>("/account.Account/Login", grpc_web_1.MethodType.UNARY, LoginRequest, dependency_2.google.protobuf.StringValue, (message: LoginRequest) => message.serialize(), dependency_2.google.protobuf.StringValue.deserialize);
        Login(message: LoginRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: dependency_2.google.protobuf.StringValue) => void) {
            return this._client.rpcCall<LoginRequest, dependency_2.google.protobuf.StringValue>(this._address + "/account.Account/Login", message, metadata || {}, AccountClient.Login, callback);
        }
        private static AddAccount = new grpc_web_1.MethodDescriptor<AddAccountRequest, dependency_1.google.protobuf.Empty>("/account.Account/AddAccount", grpc_web_1.MethodType.UNARY, AddAccountRequest, dependency_1.google.protobuf.Empty, (message: AddAccountRequest) => message.serialize(), dependency_1.google.protobuf.Empty.deserialize);
        AddAccount(message: AddAccountRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: dependency_1.google.protobuf.Empty) => void) {
            return this._client.rpcCall<AddAccountRequest, dependency_1.google.protobuf.Empty>(this._address + "/account.Account/AddAccount", message, metadata || {}, AccountClient.AddAccount, callback);
        }
        private static GetAccount = new grpc_web_1.MethodDescriptor<dependency_2.google.protobuf.StringValue, AccountDetails>("/account.Account/GetAccount", grpc_web_1.MethodType.UNARY, dependency_2.google.protobuf.StringValue, AccountDetails, (message: dependency_2.google.protobuf.StringValue) => message.serialize(), AccountDetails.deserialize);
        GetAccount(message: dependency_2.google.protobuf.StringValue, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: AccountDetails) => void) {
            return this._client.rpcCall<dependency_2.google.protobuf.StringValue, AccountDetails>(this._address + "/account.Account/GetAccount", message, metadata || {}, AccountClient.GetAccount, callback);
        }
        private static GetAllAccounts = new grpc_web_1.MethodDescriptor<dependency_1.google.protobuf.Empty, AccountList>("/account.Account/GetAllAccounts", grpc_web_1.MethodType.UNARY, dependency_1.google.protobuf.Empty, AccountList, (message: dependency_1.google.protobuf.Empty) => message.serialize(), AccountList.deserialize);
        GetAllAccounts(message: dependency_1.google.protobuf.Empty, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: AccountList) => void) {
            return this._client.rpcCall<dependency_1.google.protobuf.Empty, AccountList>(this._address + "/account.Account/GetAllAccounts", message, metadata || {}, AccountClient.GetAllAccounts, callback);
        }
        private static GetAccounts = new grpc_web_1.MethodDescriptor<GetAccountsRequest, AccountPages>("/account.Account/GetAccounts", grpc_web_1.MethodType.UNARY, GetAccountsRequest, AccountPages, (message: GetAccountsRequest) => message.serialize(), AccountPages.deserialize);
        GetAccounts(message: GetAccountsRequest, metadata: grpc_web_1.Metadata | null, callback: (error: grpc_web_1.RpcError, response: AccountPages) => void) {
            return this._client.rpcCall<GetAccountsRequest, AccountPages>(this._address + "/account.Account/GetAccounts", message, metadata || {}, AccountClient.GetAccounts, callback);
        }
    }
}
